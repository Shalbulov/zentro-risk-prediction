import { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { ChevronLeftIcon, EyeCloseIcon, EyeIcon } from "../../icons";
import Label from "../form/Label";
import Input from "../form/input/InputField";
import Checkbox from "../form/input/Checkbox";

import { useForm, useWatch } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import * as yup from "yup";

// ‚úÖ –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const schema = yup.object().shape({
  firstName: yup
    .string()
    .required("–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    .test(
      "only-letters",
      "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã",
      (value) => /^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$/.test(value || "")
    ),
  lastName: yup
    .string()
    .required("–§–∞–º–∏–ª–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
    .test(
      "only-letters",
      "–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã",
      (value) => /^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$/.test(value || "")
    ),
  email: yup
    .string()
    .required("Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    .email("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
  password: yup
    .string()
    .required("–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    .min(8, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤")
    .test(
      "has-lowercase",
      "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É",
      (value) => /[a-z]/.test(value || "")
    )
    .test(
      "has-uppercase",
      "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É",
      (value) => /[A-Z]/.test(value || "")
    )
    .test(
      "has-number",
      "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É",
      (value) => /\d/.test(value || "")
    )
    .test(
      "has-special",
      "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª",
      (value) => /[@$!%*?&/#^()+\-]/.test(value || "")
    ),
});

export default function SignUpForm() {
  const navigate = useNavigate();
  const [showPassword, setShowPassword] = useState(false);
  const [isChecked, setIsChecked] = useState(false);

  const {
    register,
    handleSubmit,
    control,
    formState: { errors },
  } = useForm({
    resolver: yupResolver(schema),
    mode: "onChange",
  });

  const passwordValue = useWatch({ control, name: "password" });

  const passwordRules = [
    {
      id: 1,
      label: "–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤",
      isValid: (val: string) => val.length >= 8,
    },
    {
      id: 2,
      label: "–•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞",
      isValid: (val: string) => /[a-z]/.test(val),
    },
    {
      id: 3,
      label: "–•–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞",
      isValid: (val: string) => /[A-Z]/.test(val),
    },
    {
      id: 4,
      label: "–•–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞",
      isValid: (val: string) => /\d/.test(val),
    },
    {
      id: 5,
      label: "–•–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª (@$!%*?&/#^()+-)",
      isValid: (val: string) => /[@$!%*?&/#^()+\-]/.test(val),
    },
  ];

  const onSubmit = async (data: any) => {
    try {
      const res = await fetch("http://localhost:4000/api/auth/signup", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const response = await res.json();

      if (res.ok) {
        alert("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!");
        navigate("/signin");
      } else {
        alert(response.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }
    } catch (err) {
      console.error(err);
      alert("üö® –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º");
    }
  };

  return (
    <div className="flex flex-col flex-1 w-full overflow-y-auto lg:w-1/2 no-scrollbar">
      <div className="w-full max-w-md mx-auto mb-5 sm:pt-10">
        <Link
          to="/"
          className="inline-flex items-center text-sm text-gray-500 transition-colors hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
        >
          <ChevronLeftIcon className="size-5" />
          –ù–∞–∑–∞–¥ –∫ –ø–∞–Ω–µ–ª–∏
        </Link>
      </div>

      <div className="flex flex-col justify-center flex-1 w-full max-w-md mx-auto">
        <div>
          <div className="mb-5 sm:mb-8">
            <h1 className="mb-2 font-semibold text-gray-800 text-title-sm dark:text-white/90 sm:text-title-md">
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            </h1>
            <p className="text-sm text-gray-500 dark:text-gray-400">
              –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
            </p>
          </div>

          <form onSubmit={handleSubmit(onSubmit)}>
            <div className="space-y-5">
              {/* –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è */}
              <div className="grid grid-cols-1 gap-5 sm:grid-cols-2">
                <div className="sm:col-span-1">
                  <Label>
                    –ò–º—è<span className="text-error-500">*</span>
                  </Label>
                  <Input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                    {...register("firstName")}
                  />
                  {errors.firstName && (
                    <p className="text-red-500 text-sm">{errors.firstName.message}</p>
                  )}
                </div>
                <div className="sm:col-span-1">
                  <Label>
                    –§–∞–º–∏–ª–∏—è<span className="text-error-500">*</span>
                  </Label>
                  <Input
                    type="text"
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                    {...register("lastName")}
                  />
                  {errors.lastName && (
                    <p className="text-red-500 text-sm">{errors.lastName.message}</p>
                  )}
                </div>
              </div>

              {/* Email */}
              <div>
                <Label>
                  Email<span className="text-error-500">*</span>
                </Label>
                <Input
                  type="email"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                  {...register("email")}
                />
                {errors.email && (
                  <p className="text-red-500 text-sm">{errors.email.message}</p>
                )}
              </div>

              {/* –ü–∞—Ä–æ–ª—å */}
              <div>
                <Label>
                  –ü–∞—Ä–æ–ª—å<span className="text-error-500">*</span>
                </Label>
                <div className="relative">
                  <Input
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                    type={showPassword ? "text" : "password"}
                    {...register("password")}
                  />
                  <span
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute z-30 -translate-y-1/2 cursor-pointer right-4 top-1/2"
                  >
                    {showPassword ? (
                      <EyeIcon className="fill-gray-500 dark:fill-gray-400 size-5" />
                    ) : (
                      <EyeCloseIcon className="fill-gray-500 dark:fill-gray-400 size-5" />
                    )}
                  </span>
                </div>
                {errors.password && (
                  <p className="text-red-500 text-sm">{errors.password.message}</p>
                )}

                {/* ‚úÖ –ë–ª–æ–∫ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π */}
                <ul className="mt-3 space-y-2 text-sm">
                  {passwordRules.map((rule) => {
                    const valid = rule.isValid(passwordValue || "");
                    return (
                      <li key={rule.id} className="flex items-center gap-2">
                        <Checkbox
                          className="w-4 h-4"
                          checked={valid}
                          disabled
                        />
                        <span className={`${valid ? "text-green-600" : "text-gray-500"}`}>
                          {rule.label}
                        </span>
                      </li>
                    );
                  })}
                </ul>
              </div>

              {/* –°–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏ */}
              <div className="flex items-center gap-3">
                <Checkbox
                  className="w-5 h-5"
                  checked={isChecked}
                  onChange={setIsChecked}
                />
                <p className="inline-block font-normal text-gray-800 dark:text-white">
                  –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
                </p>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ */}
              <div>
                <button
                  type="submit"
                  className="flex items-center justify-center w-full px-4 py-3 text-sm font-medium text-white transition rounded-lg bg-brand-500 shadow-theme-xs hover:bg-brand-600"
                >
                  –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                </button>
              </div>
            </div>
          </form>

          {/* –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç */}
          <div className="mt-5">
            <p className="text-sm font-normal text-center text-gray-700 dark:text-gray-400 sm:text-start">
              –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
              <Link
                to="/signin"
                className="text-brand-500 hover:text-brand-600 dark:text-brand-400"
              >
                –í–æ–π—Ç–∏
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
